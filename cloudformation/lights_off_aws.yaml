---
AWSTemplateFormatVersion: "2010-09-09"

Description: |-
  Start, reboot, stop and back up AWS resources using schedules in tags

  github.com/sqlxpert/lights-off-aws/  GPLv3  Copyright Paul Marcelin

Parameters:

  LambdaSourceS3BucketNamePrefix:
    Type: String
    Description: >-
      S3 bucket where AWS Lambda function source code is stored. A bucket with
      this name PLUS a region suffix, e.g., my-bucket-us-east-1, must exist in
      EACH target region, and must contain the SAME objects, readable by EVERY
      target AWS account.
  LambdaFnFileName:
    Type: String
    Description: >-
      AWS Lamba function source code file name (before .py.zip suffixes)
    Default: "lights_off_aws_find_do"
  LogLevel:
    Type: String
    Description: >-
      Threshold for logging the activities of the AWS Lambda functions. See
      https://docs.python.org/3/library/logging.html#levels
    Default: ERROR
    AllowedValues:
      - CRITICAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET

  # Do not validate, in case values accepted by underlying APIs change:
  LogsRetainDays:
    Type: Number
    Description: >-
      How many days to keep CloudWatch logs from the AWS Lambda functions. See
      http://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html
    Default: 7
  FindLambdaFnMemoryMB:
    Type: Number
    Description: >-
      How many megabytes of memory to allocate to the "Find" AWS Lambda
      function. Increase only in case of out-of-memory errors.
    Default: 128
  FindLambdaFnTimeoutSecs:
    Type: Number
    Description: >-
      How many seconds before execution of the "Find" AWS Lambda function
      is canceled. Increase only in case of time-out errors.
    Default: 60
  DoLambdaFnMemoryMB:
    Type: Number
    Description: >-
      How many megabytes of memory to allocate to the "Do" AWS Lambda
      function. Increase only in case of out-of-memory errors.
    Default: 128
  DoLambdaFnTimeoutSecs:
    Type: Number
    Description: >-
      How many seconds before execution of the "Do" AWS Lambda function is
      canceled. Increase only in case of time-out errors. Also determines
      visibility timeout for operations queue messages.
    Default: 60

  # SqsKmsKeyId:
  #   Type: String
  #   Description: >-
  #     KMS key (key ID, not alias) for SQS queues; using the default service
  #     key is not recommended
  QueueMessageBytesMax:
    Type: Number
    Description: Operations queue message size limit (bytes)
    MinValue: 1024
    Default: 16384
    MaxValue: 262144  # 256 KiB
  LambaFnTriggersEnabled:
    Type: String
    Description: >-
      Whether the "Find" AWS Lambda function will run automatically, checking
      every 10 minutes for AWS resources with scheduled operations, and whether
      the "Do" function will run automatically, executing queued operations.
    Default: "true"
    AllowedValues:
      - "false"
      - "true"

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Essentials
        Parameters:
          # - MainRegion
          - LambdaSourceS3BucketNamePrefix
          - LambaFnTriggersEnabled
          # - SqsKmsKeyId
      - Label:
          default: AWS Lambda function to find resources with scheduled operations
        Parameters:
          - FindLambdaFnMemoryMB
          - FindLambdaFnTimeoutSecs
      - Label:
          default: AWS Lambda function to do scheduled operations
        Parameters:
          - DoLambdaFnMemoryMB
          - DoLambdaFnTimeoutSecs
      - Label:
          default: Miscellaneous
        Parameters:
          - LogsRetainDays
          - LogLevel
          - QueueMessageBytesMax
          - LambdaFnFileName
    ParameterLabels:
      LambdaSourceS3BucketNamePrefix:
        default: AWS Lambda source code S3 bucket name prefix (before -<region>)
      LambaFnTriggersEnabled:
        default: AWS Lambda functions enabled?
      FindLambdaFnMemoryMB:
        default: Memory (MB)
      FindLambdaFnTimeoutSecs:
        default: Timeout (seconds)
      DoLambdaFnMemoryMB:
        default: Memory (MB)
      DoLambdaFnTimeoutSecs:
        default: Timeout (seconds)
      LogsRetainDays:
        default: Log retention period (days)
      LogLevel:
        default: Log level
      QueueMessageBytesMax:
        default: Operation queue message size limit (bytes)
      LambdaFnFileName:
        default: AWS Lambda function source file name (before .py.zip)

Conditions:

  LambaFnTriggersEnabledCond: !Equals [ !Ref LambaFnTriggersEnabled, "true" ]

Resources:

  # KmsDecrypt:
  #   Type: AWS::IAM::ManagedPolicy
  #   DeletionPolicy: Delete
  #   Properties:
  #     Description: !Sub "KMS key ID ${SqsKmsKeyId}: use for decryption (SQS only)"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #            # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-key-management.html#receive-from-encrypted-queue
  #            - "kms:Decrypt"
  #           Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SqsKmsKeyId}"
  #           Condition:
  #              StringEquals: { "kms:ViaService": !Sub "sqs.${AWS::Region}.amazonaws.com" }

  OperationFailedQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      # KmsMasterKeyId: !Ref SqsKmsKeyId
      # KmsDataKeyReusePeriodSeconds: 86400  # seconds (24 hours)
      MaximumMessageSize: !Ref QueueMessageBytesMax
      MessageRetentionPeriod: 604800  # seconds (7 days)
      ReceiveMessageWaitTimeSeconds: 20  # long polling (lowest cost)
      VisibilityTimeout: 0  # seconds; dead message retries don't make sense
      RedriveAllowPolicy:
        redrivePermission: allowAll
        # redrivePermission: byQueue + sourceQueueArns would be circular

  OperationFailedQueueReceivePol:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      Description: !Sub "SQS ${OperationFailedQueue.QueueName} messages: receive, change visibility time, delete"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility*
              - sqs:DeleteMessage*
              - sqs:GetQueueAttributes
            Resource: !GetAtt OperationFailedQueue.Arn

  OperationQueue:
    Type: AWS::SQS::Queue
    Properties:
      # KmsMasterKeyId: !Ref SqsKmsKeyId
      # KmsDataKeyReusePeriodSeconds: 86400  # seconds (24 hours)
      MaximumMessageSize: !Ref QueueMessageBytesMax
      MessageRetentionPeriod: 1200  # seconds (20 minutes)
      ReceiveMessageWaitTimeSeconds: 20  # long polling (lowest cost)
      VisibilityTimeout: !Ref DoLambdaFnTimeoutSecs
      RedrivePolicy:
        maxReceiveCount: 1
        deadLetterTargetArn: !GetAtt OperationFailedQueue.Arn

  OperationQueueSendPol:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      Description: !Sub "SQS ${OperationQueue.QueueName} messages: send"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage*
            Resource: !GetAtt OperationQueue.Arn
          # - Effect: Allow
          #   Action:  # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-key-management.html#send-to-encrypted-queue
          #    - "kms:GenerateDataKey"
          #    - "kms:Decrypt"
          #   Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${BothKmsMasterKeyId}"

  OperationQueueReceivePol:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      Description: !Sub "SQS ${OperationQueue.QueueName} messages: receive, change visibility time, delete"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility*
              - sqs:DeleteMessage*
              - sqs:GetQueueAttributes  # https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-permissions
            Resource: !GetAtt OperationQueue.Arn

  LambdaFnLogGrpCreatePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Log group: create; run-time fallback in case a Lambda function's
        original log group has been deleted; see AWSLambdaBasicExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: "*"

  FindLambdaFnEc2ReadPol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "EC2 instances, tags; EBS volumes: describe"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:DescribeVolumes
              - ec2:DescribeTags
            Resource: "*"

  FindLambdaFnRdsReadPol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "RDS database instances, clusters: describe, get tags"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: rds:DescribeDBInstances
            Resource: "*"
          - Effect: Allow
            Action: rds:DescribeDBClusters
            Resource: "*"
          - Effect: Allow
            Action: rds:ListTagsForResource
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*"

  FindLambdaFnCloudFormationReadPol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "CloudFormation stacks: describe"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStacks
            Resource: "*"

  FindLambdaFnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaFnLogGrpCreatePol
        - !Ref FindLambdaFnEc2ReadPol
        - !Ref FindLambdaFnRdsReadPol
        - !Ref FindLambdaFnCloudFormationReadPol
        - !Ref OperationQueueSendPol

  DoLambdaFnEc2WritePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Tagged EC2 instances: start, reboot, stop, create image (allows
        reboot!). Tagged EBS volumes: create snapshot. All EC2 images and EBS
        snapshots: tag, but cannot tag for deletion, or delete.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ec2:StartInstances
            Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-start": "*" }
          - Effect: Allow
            Action: ec2:RebootInstances
            Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-reboot": "*" }
          - Effect: Allow
            Action: ec2:StopInstances
            Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-stop": "*" }
          - Sid: "DangerCanForceReboot"
            Effect: Allow
            Action: ec2:CreateImage
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-backup": "*" }
          - Effect: Allow
            Action: ec2:CreateImage
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-reboot-backup": "*" }
          - Effect: Allow
            Action: ec2:CreateImage
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*"
          - Effect: Allow
            Action: ec2:CreateSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-backup": "*" }
          - Effect: Allow
            Action: ec2:CreateSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*"
          - Effect: Allow
            Action: ec2:CreateTags
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*"
          - Sid: "BackupCreatorCannotTagBackupForDeletion"
            Effect: Deny
            Action: ec2:CreateTags
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*"
            Condition:
              ForAnyValue:StringEquals: { "aws:TagKeys": "sched-delete" }
          - Sid: "BackupCreatorCannotDeleteImageOrSnapshot"
            Effect: Deny
            Action:
              - ec2:DeregisterImage
              - ec2:DeleteSnapshot
            Resource: "*"

  DoLambdaFnRdsWritePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Tagged RDS database instances, clusters: start, reboot (includes
        failover), stop, create snapshot. All RDS snapshots: tag, but cannot
        tag for deletion, or delete.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: rds:StartDBInstance
            Resource: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-start": "*" }
          - Effect: Allow
            Action: rds:RebootDBInstance
            Resource: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-reboot": "*" }
          - Effect: Allow
            Action: rds:RebootDBInstance
            Resource: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-reboot-failover": "*" }
          - Effect: Allow
            Action: rds:StopDBInstance
            Resource: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-stop": "*" }
          - Effect: Allow
            Action: rds:CreateDBSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-backup": "*" }
          - Effect: Allow
            Action: rds:CreateDBSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
          - Effect: Allow
            Action: rds:CreateDBClusterSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-backup": "*" }
          - Effect: Allow
            Action: rds:CreateDBClusterSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:*"
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
          - Effect: Allow
            Action: rds:AddTagsToResource
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:*"
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
          - Sid: "BackupCreatorCannotTagBackupForDeletion"
            Effect: Deny
            Action: rds:AddTagsToResource
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:*"
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
            Condition:
              ForAnyValue:StringLike: { "aws:RequestTag/sched-delete": "*" }
          - Sid: "BackupCreatorCannotDeleteDBSnapshot"
            Effect: Deny
            Action: rds:DeleteDBSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
          - Sid: "BackupCreatorCannotDeleteDBClusterSnapshotBackup"
            Effect: Deny
            Action: rds:DeleteDBClusterSnapshot
            Resource:
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:*"

  DoLambdaFnCloudFormationWritePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Tagged CloudFormation stacks: update"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: cloudformation:UpdateStack
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-toggle-param-false": "*" }
          - Effect: Allow
            Action: cloudformation:UpdateStack
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
            Condition:
              StringLike: { "aws:ResourceTag/sched-toggle-param-true": "*" }

  DoLambdaFnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaFnLogGrpCreatePol
        - !Ref DoLambdaFnEc2WritePol
        - !Ref DoLambdaFnRdsWritePol
        - !Ref DoLambdaFnCloudFormationWritePol
        - !Ref OperationQueueReceivePol

  FindLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt FindLambdaFnRole.Arn
      Code:
        S3Bucket: !Sub "${LambdaSourceS3BucketNamePrefix}-${AWS::Region}"
        S3Key: !Sub "${LambdaFnFileName}.py.zip"
      Architectures:
        - arm64
      Runtime: python3.9
      Environment:
        Variables:
          "QUEUE_URL": !GetAtt OperationQueue.QueueUrl
          "QUEUE_MSG_BYTES_MAX": !Ref QueueMessageBytesMax
          "LOG_LEVEL": !Ref LogLevel
      Handler: !Sub "${LambdaFnFileName}.lambda_handler_find"
      ReservedConcurrentExecutions: 1  # Only one run at a time!
      Timeout: !Ref FindLambdaFnTimeoutSecs
      MemorySize: !Ref FindLambdaFnMemoryMB

  FindLambdaFnLogGrp:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain  # Might want to review after function is deleted
    Properties:
      # Lambda names the log group after the function, so a CloudWatch-assigned
      # name won't work. A custom name will, however, interfere with changes.
      LogGroupName: !Sub "/aws/lambda/${FindLambdaFn}"
      RetentionInDays: !Ref LogsRetainDays

  FindLambdaFnLogWritePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Find Lambda function log streams: create, and put events; based on
        AWSLambdaBasicExecutionRole
      Roles: [ !Ref FindLambdaFnRole ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${FindLambdaFnLogGrp}:log-stream:*"
            # !GetAtt LogGroup.Arn ends with :* ,
            # complicating conversion to log stream ARN

  FindLambdaFnSched:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Every 10 minutes (do not change!): run Find AWS Lambda function
      ScheduleExpression: "cron(01,11,21,31,41,51 * * * ? *)"
      State:
        Fn::If:
          - LambaFnTriggersEnabledCond
          - ENABLED
          - DISABLED
      Targets: [ { Arn: !GetAtt FindLambdaFn.Arn, Id: !Ref FindLambdaFn } ]

  FindLambdaFnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FindLambdaFn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FindLambdaFnSched.Arn

  ############################################################################

  DoLambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt DoLambdaFnRole.Arn
      Code:
        S3Bucket: !Sub "${LambdaSourceS3BucketNamePrefix}-${AWS::Region}"
        S3Key: !Sub "${LambdaFnFileName}.py.zip"
      Architectures:
        - arm64
      Runtime: python3.9
      Environment:
        Variables:
          "LOG_LEVEL": !Ref LogLevel
      Handler: !Sub "${LambdaFnFileName}.lambda_handler_do"
      ReservedConcurrentExecutions: 5
      Timeout: !Ref DoLambdaFnTimeoutSecs
      MemorySize: !Ref DoLambdaFnMemoryMB

  DoLambdaFnLogGrp:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain  # Might want to review after function is deleted
    Properties:
      # Lambda names the log group after the function, so a CloudWatch-assigned
      # name won't work. A custom name will, however, interfere with changes.
      LogGroupName: !Sub "/aws/lambda/${DoLambdaFn}"
      RetentionInDays: !Ref LogsRetainDays

  DoLambdaFnLogWritePol:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Do Lambda function log streams: create, and put events; based on
        AWSLambdaBasicExecutionRole
      Roles: [ !Ref DoLambdaFnRole ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DoLambdaFnLogGrp}:log-stream:*"
            # !GetAtt LogGroup.Arn ends with :* ,
            # complicating conversion to log stream ARN

  DoLambdaFnSqsMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      # BisectBatchOnFunctionError: False
      Enabled: !Ref LambaFnTriggersEnabled
      EventSourceArn: !GetAtt OperationQueue.Arn
      FunctionName: !GetAtt DoLambdaFn.Arn
      # MaximumBatchingWindowInSeconds: 0
      # MaximumRecordAgeInSeconds: 600
      # MaximumRetryAttempts: 1
      # ParallelizationFactor: 1

  DoLambdaFnInvokeLambdaPerm:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DoLambdaFn
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt OperationQueue.Arn
