---
AWSTemplateFormatVersion: "2010-09-09"

Description: |-
  Demonstrates deleting and recreating AWS resources in your own
  CloudFormation stack, based on cron schedules in stack tags.

  github.com/sqlxpert/lights-off-aws/  GPLv3  Copyright Paul Marcelin

# STEP 0 #####################################################################
#
# Note that CloudFormation "transforms" are not currently compatible. Search
# for "transforms" in lights_off_aws.py .
#
# STEP 1 #####################################################################
#
# Define a service role that allows CloudFormation to create, tag, update,
# untag, and delete ALL of the resources in your template. See
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-servicerole.html
#
# For this example template, create an IAM role in the AWS Console. Leave
# Trusted entity type set to AWS service. From Service or use case, near the
# bottom, select CloudFormation. On the next page, search for the
# AmazonEC2FullAccess policy and check the box to the left of that policy.
# It is not least-privilege, and is only suitable for testing.
#
# For a complete, least-privilege example, see DeploymentRole in
# lights_off_aws_prereq.yaml . Its custom policies authorize creation of a
# stack from lights_off_aws.yaml .
#
# You MUST select your deployment role when you create a CloudFormation stack
# from your template. Scroll to the Permissions section and set IAM role -
# optional . Otherwise, stack updates triggered by Lights Off will fail.
#
# About resource tagging: CloudFormation needs permission to create, update,
# and delete arbitrary resource tags, due to the automatic propagation of
# stack tags. Because CloudFormation is regularly updated to propagate stack
# tags to more resource types, provide tagging privileges for all of the
# resource types in your template, even if CloudFormation doesn't yet
# propagate stack tags to them.
#
# For many AWS services, you can achieve a least-privilege design with a
# policy condition:
#   "StringLike": { "aws:ResourceTag/aws:cloudformation:stack-name": "*KEYWORD*" }
# where KEYWORD is a string that you will require in the name of all stacks
# created using your deployment role, and that you will not allow in the
# names of any other stacks.
############################################################################

Parameters:

  PlaceholderHelp:
    Type: String
    Default: "https://github.com/sqlxpert/lights-off-aws#bonus-delete-and-recreate-expensive-resources-on-a-schedule"

  PlaceholderSuggestedStackName:
    Type: String
    Default: "LightsOffBonusCloudFormationExample"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >-
      Identifier of the Virtual Private Cloud in which the sample security
      groups will be created

  # STEP 2 ###################################################################
  #
  # Add this parameter to your template:
  Enable:  # Do not change the parameter name or the capitalization!
    Type: String  # No Boolean parameter type is available
    Description: >-
      Whether to create expensive resources. Lights Off will automatically
      update the stack, causing the resources to be created or deleted based
      on the schedules in the stack's "sched-set-Enable-true" and
      "sched-set-Enable-false" tags. See
      https://github.com/sqlxpert/lights-off-aws
    AllowedValues:
      - "false"
      - "true"
    Default: "false"  # Start without the expensive resources
    ##########################################################################

Metadata:  # Optional section, for AWS Console users

  AWS::CloudFormation::Interface:
    ParameterGroups:  # Orders parameters and groups them into sections
      - Label:
          default: For Reference
        Parameters:
          - PlaceholderHelp
          - PlaceholderSuggestedStackName
      - Label:
          default: Essential
        Parameters:
          - Enable
          - VpcId
    ParameterLabels:  # Determines parameter labels
      PlaceholderHelp:
        default: For help with this stack, see
      PlaceholderSuggestedStackName:
        default: Suggested stack name
      Enable:
        default: Enabled?
      VpcId:
        default: VPC

Conditions:

  # STEP 3 ###################################################################
  #
  # Review
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
  # and add this condition to your template:
  EnableTrue:
    !Equals [!Ref Enable, "true"]
    ##########################################################################

Resources:

  ConditionalSecGrp:
    Type: AWS::EC2::SecurityGroup
    # STEP 4 #################################################################
    #
    # Add this property to each conditionally-created resource. There is no
    # need to add it to free or low-cost resources.
    Condition: EnableTrue
    ##########################################################################
    Properties:
      GroupDescription:
        Fn::Sub: >-
          Demonstrates deletion and recreation of a resource (this security
          group) based on schedules in the
          sched-set-Enable-true/-false stack tags of ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ConditionalSecGrp"
      VpcId: !Ref VpcId

  SecGrpWithConditionalRule:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: >-
          Demonstrates deletion and recreation of a resource property (a
          security group ingress rule) based on schedules in the
          sched-set-Enable-true/-false stack tags of ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecGrpWithConditionalRule"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Permanent rule
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 8.8.8.8/32
        # STEP 5 #############################################################
        #
        # If you need to conditionally set a resource property or
        # conditionally add or remove a list item, use:
        # Fn::If: [ EnableTrue, VALUE_IF_ENABLED, VALUE_IF_NOT_ENABLED ]
        #
        # If a resource property is to be omitted entirely when Enable is
        # false, specify !Ref AWS::NoValue for VALUE_IF_NOT_ENABLED .
        # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html#cfn-pseudo-param-novalue
        - Fn::If:
            - EnableTrue
            - Description: Conditional rule
              IpProtocol: tcp
              FromPort: 53
              ToPort: 53
              SourceSecurityGroupId: !Ref ConditionalSecGrp
            - !Ref AWS::NoValue
# STEP 6 #####################################################################
#
# Test your deployment role and your stack. Try a manual stack update in which
# you change the Enable parameter from false to true, and anoter in which you
# change it from true to false.
#
# STEP 7 #####################################################################
#
# Refer to
# https://github.com/sqlxpert/lights-off-aws#tag-values-schedules
# and add schedule tags to your stack:
# - sched-set-Enable-true
# - sched-set-Enable-false
# Wait for the scheduled times and check the stack resources.
##############################################################################
